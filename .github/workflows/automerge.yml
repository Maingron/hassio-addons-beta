# GitHub Action for automatic pull request merging

# Name of the workflow
name: Auto-merge PR

# Controls when the action will run.
on:
  # Trigger the workflow on pull request events
  pull_request:
    types: [labeled, synchronize, reopened ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "automerge"
  automerge:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Check for the "autobot" label and successful commit statuses
      - name: Check for label and successful checks
        run: |
          MERGEABLE="false" # Default value

          # Check if the PR has the "autobot" label
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'autobot') }}" == "true" ]]; then
            echo "PR has the 'autobot' label."

            # Get the combined status for the PR's head commit
            STATUS_URL="https://api.github.com/repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/status"
            echo "Fetching commit status from: $STATUS_URL"

            # -s: silent, -f: fail silently on server errors (4xx, 5xx), -L: follow redirects
            COMMIT_STATUS_RESPONSE=$(curl -sfL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "$STATUS_URL")
            CURL_EXIT_CODE=$?

            if [[ "$CURL_EXIT_CODE" -ne 0 ]]; then
              echo "Error: Failed to fetch commit status from GitHub API. Curl exit code: $CURL_EXIT_CODE"
              # MERGEABLE remains "false"
            else
              COMMIT_STATE=$(echo "$COMMIT_STATUS_RESPONSE" | jq -r '.state')
              JQ_EXIT_CODE=$?

              if [[ "$JQ_EXIT_CODE" -ne 0 ]]; then
                echo "Error: Failed to parse commit status JSON with jq. JQ exit code: $JQ_EXIT_CODE"
                echo "Response was: $COMMIT_STATUS_RESPONSE"
                # MERGEABLE remains "false"
              elif [[ "$COMMIT_STATE" == "success" ]]; then
                echo "All checks have passed (state: $COMMIT_STATE)."
                MERGEABLE="true"
              else
                echo "Not all checks have passed (state: $COMMIT_STATE)."
                # MERGEABLE remains "false"
              fi
            fi
          else
            echo "PR does not have the 'autobot' label."
            # MERGEABLE remains "false"
          fi

          echo "MERGEABLE=${MERGEABLE}" >> $GITHUB_ENV
          echo "Automerge condition: MERGEABLE is ${MERGEABLE}" # For logging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        if: env.MERGEABLE == 'true'
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches to accurately diff
          fetch-depth: 0

      # Step 2: Merge the pull request if all conditions are met
      - name: Merge pull request
        if: env.MERGEABLE == 'true'
        # Use the official GitHub CLI to merge the pull request
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --auto --squash
        # Environment variables used in the script
        env:
          # The GitHub token is required to use the GitHub CLI
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
